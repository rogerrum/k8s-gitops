argo-cd:

#  global:
#    image:
#      repository: argoproj/argocd
  dex:
    enabled: false

  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      targetCPUUtilizationPercentage: 85
      targetMemoryUtilizationPercentage: 85

#    extraArgs:
#      - --parallelismlimit 10

    env:
      - name: ARGOCD_EXEC_TIMEOUT
        value: 300s

    metrics:
      enabled: false
      serviceMonitor:
        enabled: false

    extraContainers:
      # Custom hack to expose secret helm values over localhost http
      - name: secret-loader
        image: httpd:2.4
        ports:
          - name: secret-loader
            containerPort: 80
            protocol: TCP
        volumeMounts:
          - mountPath: /usr/local/apache2/htdocs/
            name: helm-values
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
          limits:
            cpu: 50m
            memory: 128Mi

    volumes:
      - name: helm-values
        projected:
          sources:
            - secret:
                name: botkube-helm-values
                optional: true
            - secret:
                name: step-issuer-helm-values
                optional: true
            - secret:
                name: argocd-patch-helm-values
                optional: true
            - secret:
                name: kube-prometheus-stack-helm-values
                optional: true

            - secret:
                name: minio-helm-values
                optional: true
            - secret:
                name: home-assistant-helm-values
                optional: true
            - secret:
                name: frigate-helm-values
                optional: true
            - secret:
                name: emqx-helm-values
                optional: true
            - secret:
                name: kured-helm-values
                optional: true
            - secret:
                name: loki-helm-values
                optional: true
            - secret:
                name: thanos-helm-values
                optional: true


    resources:
      requests:
        cpu: 1000m
        memory: 2048Mi
      limits:
        cpu: 2000m
        memory: 2048Mi
#      limits:
#        cpu: 5000m
#        memory: 4744Mi

    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: storage
                  operator: DoesNotExist
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - argocd-repo-server
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                    - argocd
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - repo-server
            topologyKey: "kubernetes.io/hostname"

  configs:
    cm:
      url: "https://argo.rsr.net"
      oidc.config: |
        name: Auth0
        issuer: https://rogerrum.us.auth0.com/
        clientID: $argocd-oidc-secret:client-id
        clientSecret: $argocd-oidc-secret:client-secret
        requestedScopes:
        - openid
        - profile
        - email
        # not strictly necessary - but good practice:
        #- 'http://your.domain/groups'

    rbac:
      policy.default: "role:admin"

  server:
    logLevel: debug
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/issuer: step-issuer
        cert-manager.io/issuer-kind: StepClusterIssuer
        cert-manager.io/issuer-group: certmanager.step.sm
        cert-manager.io/revision-history-limit: "3"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
      hostname: argo.rsr.net
      hosts:
        - argo.rsr.net
      tls:
        - hosts:
            - "argo.rsr.net"
          secretName: argo-cert-tls
    extraArgs:
      - --insecure
    config:
      repositories: |
        - type: helm
          name: stable
          url: https://charts.helm.sh/stable
        - type: helm
          name: argo-cd
          url: https://argoproj.github.io/argo-helm
        - type: git
          url: https://github.com/rogerrum/k8s-gitops.git
          passwordSecret:
            name: deployment-git-repo-credentials
            key: password
          usernameSecret:
            name: deployment-git-repo-credentials
            key: username
      # Following the guide at https://argoproj.github.io/argo-cd/user-guide/diffing/#system-level-configuration
      resource.customizations: |
        admissionregistration.k8s.io/MutatingWebhookConfiguration:
          ignoreDifferences: |
            jsonPointers:
            - /webhooks/0/clientConfig/caBundle

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    autoscaling:
      enabled: true
      minReplicas: 2
      targetCPUUtilizationPercentage: 65
      targetMemoryUtilizationPercentage: 65
    resources:
      requests:
        cpu: 500m
        memory: 180Mi
      limits:
        cpu: 500m
        memory: 200Mi
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - argocd-server
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                    - argocd
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - server
            topologyKey: "kubernetes.io/hostname"

  controller:
    replicas: 1

    #image:
    #  repository: "ghcr.io/rogerrum/argocd"
    #  tag: "latest"
      
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

    args:
      repoServerTimeoutSeconds: 300

#  redis:
#    image:
#      repository: redis
#      tag: 6.2.6-alpine

  redis-ha:
    enabled: true

    # Temp disable
    exporter:
      enabled: false
#    image:
#      repository: redis
#      tag: 6.2.6-alpine

    haproxy:
      metrics:
        enabled: false

  notifications:
    enabled: true

    argocdUrl: https://argo.rsr.net
    secret:
      create: false

    subscriptions:
      # For more information: https://argocd-notifications.readthedocs.io/en/stable/subscriptions/
      # # subscription for on-sync-status-unknown trigger notifications
      - recipients:
          - discord
        triggers:
          - on-deployed
          - on-sync-failed
#          - on-sync-running
          - on-sync-status-unknown
          - on-health-degraded
    #        - on-sync-succeeded

    templates:
      # For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/
      template.app-deployed: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "username": "ArgoCd",
                "avatar_url": "https://avatars.githubusercontent.com/u/30269780",
                "content": ":white_check_mark: Application {{.app.metadata.name}} is now running new version of deployments manifests.",
                "embeds": [
                  {
                    "title": "{{ .app.metadata.name}}",
                    "url":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 1621586,
                    "fields": [
                    {
                      "name": "Sync Status",
                      "value": "{{.app.status.sync.status}}",
                      "inline": true
                    },
                    {
                      "name": "Repository",
                      "value": "{{.app.spec.source.repoURL}}",
                      "inline": true
                    },
                    {
                      "name": "Revision",
                      "value": "{{.app.status.sync.revision}}",
                      "inline": true
                    }
                    {{range $index, $c := .app.status.conditions}}
                    {{if not $index}},{{end}}
                    {{if $index}},{{end}}
                    {
                      "name": "{{$c.type}}",
                      "value": "{{$c.message}}",
                      "inline": true
                    }
                    {{end}}
                    ],
                    "footer": {
                        "text": "ArgoCd"
                    }, 
                    "timestamp": "{{ (call .time.Now).Format "2006-01-02T15:04:05.999Z" }}"
                  }
                ]
              }
      template.app-health-degraded: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "username": "ArgoCd",
                "avatar_url": "https://avatars.githubusercontent.com/u/30269780",
                "content": ":exclamation: Application {{.app.metadata.name}} has degraded.",
                "embeds": [
                  {
                    "title": "{{ .app.metadata.name}}",
                    "url":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 16039984,
                    "fields": [
                    {
                      "name": "Sync Status",
                      "value": "{{.app.status.sync.status}}",
                      "inline": true
                    },
                    {
                      "name": "Repository",
                      "value": "{{.app.spec.source.repoURL}}",
                      "inline": true
                    }
                    {{range $index, $c := .app.status.conditions}}
                    {{if not $index}},{{end}}
                    {{if $index}},{{end}}
                    {
                      "name": "{{$c.type}}",
                      "value": "{{$c.message}}",
                      "inline": true
                    }
                    {{end}}
                    ],
                    "footer": {
                        "text": "ArgoCd"
                    }, 
                    "timestamp": "{{ (call .time.Now).Format "2006-01-02T15:04:05.999Z" }}"
                  }
                ]
              }
      template.app-sync-failed: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "username": "ArgoCd",
                "avatar_url": "https://avatars.githubusercontent.com/u/30269780",
                "content": ":exclamation: The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}",
                "embeds": [
                  {
                    "title": "{{ .app.metadata.name}}",
                    "url":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 15297910,
                    "fields": [
                    {
                      "name": "Sync Status",
                      "value": "{{.app.status.sync.status}}",
                      "inline": true
                    },
                    {
                      "name": "Repository",
                      "value": "{{.app.spec.source.repoURL}}",
                      "inline": true
                    }
                    {{range $index, $c := .app.status.conditions}}
                    {{if not $index}},{{end}}
                    {{if $index}},{{end}}
                    {
                      "name": "{{$c.type}}",
                      "value": "{{$c.message}}",
                      "inline": true
                    }
                    {{end}}
                    ],
                    "footer": {
                        "text": "ArgoCd"
                    }, 
                    "timestamp": "{{ (call .time.Now).Format "2006-01-02T15:04:05.999Z" }}"
                  }
                ]
              }
      template.app-sync-running: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "username": "ArgoCd",
                "avatar_url": "https://avatars.githubusercontent.com/u/30269780",
                "content": "The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.",
                "embeds": [
                  {
                    "title": "{{ .app.metadata.name}}",
                    "url":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 896490,
                    "fields": [
                    {
                      "name": "Sync Status",
                      "value": "{{.app.status.sync.status}}",
                      "inline": true
                    },
                    {
                      "name": "Repository",
                      "value": "{{.app.spec.source.repoURL}}",
                      "inline": true
                    }
                    {{range $index, $c := .app.status.conditions}}
                    {{if not $index}},{{end}}
                    {{if $index}},{{end}}
                    {
                      "name": "{{$c.type}}",
                      "value": "{{$c.message}}",
                      "inline": true
                    }
                    {{end}}
                    ],
                    "footer": {
                        "text": "ArgoCd"
                    }, 
                    "timestamp": "{{ (call .time.Now).Format "2006-01-02T15:04:05.999Z" }}"
                  }
                ]
              }
      template.app-sync-status-unknown: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "username": "ArgoCd",
                "avatar_url": "https://avatars.githubusercontent.com/u/30269780",
                "content": ":exclamation: Application {{.app.metadata.name}} sync is 'Unknown'.",
                "embeds": [
                  {
                    "title": "{{ .app.metadata.name}}",
                    "url":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 15297910,
                    "fields": [
                    {
                      "name": "Sync Status",
                      "value": "{{.app.status.sync.status}}",
                      "inline": true
                    },
                    {
                      "name": "Repository",
                      "value": "{{.app.spec.source.repoURL}}",
                      "inline": true
                    }
                    {{range $index, $c := .app.status.conditions}}
                    {{if not $index}},{{end}}
                    {{if $index}},{{end}}
                    {
                      "name": "{{$c.type}}",
                      "value": "{{$c.message}}",
                      "inline": true
                    }
                    {{end}}
                    ],
                    "footer": {
                        "text": "ArgoCd"
                    }, 
                    "timestamp": "{{ (call .time.Now).Format "2006-01-02T15:04:05.999Z" }}"
                  }
                ]
              }
      template.app-sync-succeeded: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "username": "ArgoCd",
                "avatar_url": "https://avatars.githubusercontent.com/u/30269780",
                "content": ":white_check_mark: Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.",
                "embeds": [
                  {
                    "title": "{{ .app.metadata.name}}",
                    "url":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 1621586,
                    "fields": [
                    {
                      "name": "Sync Status",
                      "value": "{{.app.status.sync.status}}",
                      "inline": true
                    },
                    {
                      "name": "Repository",
                      "value": "{{.app.spec.source.repoURL}}",
                      "inline": true
                    }
                    {{range $index, $c := .app.status.conditions}}
                    {{if not $index}},{{end}}
                    {{if $index}},{{end}}
                    {
                      "name": "{{$c.type}}",
                      "value": "{{$c.message}}",
                      "inline": true
                    }
                    {{end}}
                    ],
                    "footer": {
                        "text": "ArgoCd"
                    }, 
                    "timestamp": "{{ (call .time.Now).Format "2006-01-02T15:04:05.999Z" }}"
                  }
                ]
              }



    triggers:
      # For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/
      trigger.on-deployed: |
        - description: Application is synced and healthy. Triggered once per commit.
          oncePer: app.status.sync.revision
          send:
          - app-deployed
          when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      trigger.on-health-degraded: |
        - description: Application has degraded
          send:
          - app-health-degraded
          when: app.status.health.status == 'Degraded'
      trigger.on-sync-failed: |
        - description: Application syncing has failed
          send:
          - app-sync-failed
          when: app.status.operationState.phase in ['Error', 'Failed']
      trigger.on-sync-running: |
        - description: Application is being synced
          send:
          - app-sync-running
          when: app.status.operationState.phase in ['Running']
      trigger.on-sync-status-unknown: |
        - description: Application status is 'Unknown'
          send:
          - app-sync-status-unknown
          when: app.status.sync.status == 'Unknown'
      trigger.on-sync-succeeded: |
        - description: Application syncing has succeeded
          send:
          - app-sync-succeeded
          when: app.status.operationState.phase in ['Succeeded']



    notifiers:
      # For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/
      service.webhook.discord: |
        url: $discord-webhook
        headers:
        - name: Content-Type
          value: application/json
#    logLevel: debug
    bots:
      slack: 
        serviceAccount:
          create: false


