victoria-metrics-k8s-stack:
  fullnameOverride: stack
  victoria-metrics-operator:
    enabled: true
    env:
      - name: VM_VMALERTDEFAULT_CONFIGRELOADERCPU
        value: 0
      - name: VM_VMAGENTDEFAULT_CONFIGRELOADERCPU
        value: 0
      - name: VM_VMALERTMANAGER_CONFIGRELOADERCPU
        value: 0
    operator:
      disable_prometheus_converter: false # Ensure we keep enabled the converter to sync prom rules to VM rules
      enable_converter_ownership: true # Required to allow VM to remove VM rules it imports if a prometheus rule is deleted
  
  defaultDashboards:
    enabled: true
    grafanaOperator:
      # -- Create dashboards as CRDs (requires grafana-operator to be installed)
      enabled: false
  
  defaultRules:
    create: true
    rules:
      groups:
        kubernetesSystemControllerManager:
          create: false
        etcd:
          create: false
        kubernetesSystemScheduler:
          create: false
  
  vmsingle:
    enabled: true
    spec:
      # -- Data retention period. Possible units character: h(ours), d(ays), w(eeks), y(ears), if no unit character specified - month. The minimum retention period is 24h. See these [docs](https://docs.victoriametrics.com/single-server-victoriametrics/#retention)
      retentionPeriod: "3"
      replicaCount: 1
      storage:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 60Gi
      resources:
        limits:
          memory: 2Gi
        requests:
          cpu: 530m
          memory: 1.2Gi
    
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        gethomepage.dev/enabled: 'true'
        gethomepage.dev/group: Monitoring
        gethomepage.dev/icon: vm
        gethomepage.dev/name: VM
        kubernetes.io/ingress.class: nginx
        cert-manager.io/issuer: step-issuer
        cert-manager.io/issuer-kind: StepClusterIssuer
        cert-manager.io/issuer-group: certmanager.step.sm
        cert-manager.io/revision-history-limit: "3"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
      hosts:
        - vm.rsr.net
      tls:
        - hosts:
            - vm.rsr.net
          secretName: vm-cert-tls
  
  alertmanager:
    enabled: true
    spec:
      externalURL: "https://vm-alert.rsr.net"
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        gethomepage.dev/enabled: 'true'
        gethomepage.dev/group: Monitoring
        gethomepage.dev/icon: prometheus
        gethomepage.dev/name: Alertmanager
        kubernetes.io/ingress.class: nginx
        cert-manager.io/issuer: step-issuer
        cert-manager.io/issuer-kind: StepClusterIssuer
        cert-manager.io/issuer-group: certmanager.step.sm
        cert-manager.io/revision-history-limit: "3"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
        nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: https://auth.rsr.net/oauth2/start
      hosts:
        - vm-alert.rsr.net
      tls:
        - hosts:
            - vm-alert.rsr.net
          secretName: vm-alert-cert-tls
    config:
      route:
        #group_by: ["alertname", "job"]
        group_wait: 45s
        group_interval: 10m
        repeat_interval: 12h
        routes:
          - matchers:
              - alertname=~"WatchDog|InfoInhibitor|KubeMemoryOvercommit"
            receiver: 'blackhole'
          - matchers:
              - severity=~"warning|critical"
            receiver: slack-notifications
          - receiver: pagerduty
            match:
              severity: critical
            continue: true
          - receiver: discord-notifications
      inhibit_rules:
        - source_matchers:
            - severity = "critical"
          target_matchers:
            - severity = "warning"
          equal: ["alertname", "namespace"]
      receivers:
        - name: 'blackhole'
        - name: 'discord-notifications'
          webhook_configs:
            - url: 'http://alertmanager-discord:9094'
        - name: pagerduty
          pagerduty_configs:
            - routing_key: '{{ template "pagerduty.custom.routing.key" . }}'
              description: |-
                {{ template "pagerduty.custom.description" . }}

    templateFiles:
      pagerduty-custom.tmpl: |-
        {{- define "pagerduty.custom.description" -}}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}{{- end -}}
      pagerduty-custom-keys.tmpl: |-
        {{- define "pagerduty.custom.routing.key" -}}` }}111{{- end -}}


  vmalert:
    enabled: true
    spec:
      extraArgs:
        external.url: "https://vmalert.rsr.net"
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        gethomepage.dev/enabled: 'true'
        gethomepage.dev/group: Monitoring
        gethomepage.dev/icon: prometheus
        gethomepage.dev/name: VMalert
        kubernetes.io/ingress.class: nginx
        cert-manager.io/issuer: step-issuer
        cert-manager.io/issuer-kind: StepClusterIssuer
        cert-manager.io/issuer-group: certmanager.step.sm
        cert-manager.io/revision-history-limit: "3"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
        nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: https://auth.rsr.net/oauth2/start
      hosts:
        - vmalert.rsr.net
      tls:
        - hosts:
            - vmalert.rsr.net
          secretName: vmalert-cert-tls
  
  vmagent:
    enabled: true
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        gethomepage.dev/enabled: 'true'
        gethomepage.dev/group: Monitoring
        gethomepage.dev/icon: vmagent
        gethomepage.dev/name: vmagent
        kubernetes.io/ingress.class: nginx
        cert-manager.io/issuer: step-issuer
        cert-manager.io/issuer-kind: StepClusterIssuer
        cert-manager.io/issuer-group: certmanager.step.sm
        cert-manager.io/revision-history-limit: "3"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
      hosts:
        - vmagent.rsr.net
      tls:
        - hosts:
            - vmagent.rsr.net
          secretName: vmagent-cert-tls
    spec:
      additionalScrapeConfigs:
        name: victoria-metrics-secret
        key: additionalScrapeConfigs
      inlineScrapeConfig: |
        - job_name: 'pushgateway'
          scrape_interval: 60s
          static_configs:
            - targets: [ 'pushgateway.monitoring.svc:9091' ]
        - job_name: minio
          metrics_path: /minio/v2/metrics/cluster
          scheme: http
          static_configs:
            - targets: [ 'minio.default.svc:9000' ]

      resources:
        limits:
          cpu: null
          memory: 500Mi
        requests:
          cpu: 500m
          memory: 100Mi
  
  grafana:
    enabled: false
  
  prometheus-node-exporter:
    enabled: true

  
  kube-state-metrics:
    enabled: true
  
  kubelet:
    enabled: true
    vmScrape:
      spec:
        # drop high cardinality label and useless metrics for cadvisor and kubelet
        metricRelabelConfigs:
          # Drop less useful container CPU metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)'
          # Drop less useful / always zero container memory metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_memory_(failures_total|mapped_file|swap)'
          # Drop less useful container process metrics.
          - sourceLabels: [__name__]
            action: drop
            # regex: 'container_(file_descriptors|tasks_state|threads_max)'
            regex: 'container_(tasks_state|threads_max)'
          # Drop less useful container filesystem metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)'
          # Drop less useful container blkio metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_blkio_device_usage_total'
          # Drop container spec metrics that overlap with kube-state-metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_spec.*'
          # Drop cgroup metrics with no pod.
          - sourceLabels: [id, pod]
            action: drop
            regex: '.+;'
          - action: drop
            sourceLabels: [__name__]
            regex: prober_probe_duration_seconds_bucket
          # Drop high-cardinality labels.
          - action: labeldrop
            regex: (uid|id|name|pod_uid|interface)
          - action: drop
            sourceLabels: [__name__]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
  
  kubeApiServer:
    enabled: true
  
  kubeControllerManager:
    enabled: false
  
  coreDns:
    enabled: true
  
  kubeEtcd:
    enabled: false
  
  kubeScheduler:
    enabled: false
  
  kubeProxy:
    enabled: false
  
  prometheus-operator-crds:
    enabled: true  
