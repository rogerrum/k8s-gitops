kube-prometheus-stack:
  # defaultRules:
  #   rules:
  #     kubeApiserverAvailability: true
  #     kubeApiserver: true
  server:
    resources:
      requests:
        memory: 1500Mi
        cpu: 25m
      limits:
        memory: 2000Mi
  prometheusOperator:
    createCustomResource: true
    prometheusConfigReloader:
      resources:
        limits:
          cpu: 1
    # prometheusConfigReloaderImage:
    #   repository: quay.io/coreos/prometheus-config-reloader
    #   tag: v0.39.0
    # configmapReloadImage:
    #   repository: jimmidyson/configmap-reload
    #   tag: v0.4.0
    configReloaderCpu: 200m
    admissionWebhooks:
      enabled: false
  alertmanager:
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 10Gi
      tolerations:
        - key: "arm64"
          operator: "Exists"
      podMetadata:
        annotations:
          backup.velero.io/backup-volumes: alertmanager-kube-prometheus-stack-alertmanager-db
      useExistingSecret: true
      configSecret: kube-prometheus-stack-secret
      podAntiAffinity: "hard"
    ingress:
      enabled: true
      pathType: Prefix
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/cluster-issuer: vault-issuer
        cert-manager.io/common-name: prom-alert.rsr.net
        nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: https://auth.rsr.net/oauth2/start
      hosts: [ prom-alert.rsr.net ]
      tls:
        - hosts:
            - prom-alert.rsr.net
          secretName: prom-alert-cert-tls
    templateFiles:
      pagerduty-custom.tmpl: |-
        {{- define "pagerduty.custom.description" -}}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}{{- end -}}
  nodeExporter:
    serviceMonitor:
      relabelings:
        - sourceLabels: [ __meta_kubernetes_pod_node_name ]
          targetLabel: instance
          action: replace
  # kubelet:
  #   serviceMonitor:
  #     metricRelabelings:
  #     - action: replace
  #       sourceLabels:
  #       - node
  #       targetLabel: instance
  grafana:
    enabled: false
    forceDeployDashboards: true
  kubeEtcd:
    enabled: false
  kubeControllerManager:
    enabled: false
    # endpoints:
    # - 10.2.0.30
  kubeScheduler:
    enabled: false
    # endpoints:
    # - 10.2.0.30
  kubeProxy:
    enabled: false
  prometheus-node-exporter:
    tolerations:
      - key: "arm64"
        operator: "Exists"
      - key: "arm1"
        operator: "Exists"
      - key: "armhf"
        operator: "Exists"
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
  prometheus:
    ingress:
      enabled: true
      pathType: Prefix
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/cluster-issuer: vault-issuer
        cert-manager.io/common-name: prom-server.rsr.net
        nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: https://auth.rsr.net/oauth2/start
      hosts: [ prom-server.rsr.net ]
      tls:
        - hosts:
            - prom-server.rsr.net
          secretName: prom-server-cert-tls
    prometheusSpec:
      # image:
      #   repository: quay.io/prometheus/prometheus
      #   tag: v2.20.0
      replicas: 2
      replicaExternalLabelName: "replica"
      ruleSelector: { }
      ruleNamespaceSelector: { }
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelector: { }
      serviceMonitorNamespaceSelector: { }
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelector: { }
      podMonitorNamespaceSelector: { }
      podMonitorSelectorNilUsesHelmValues: false
      retention: 6h
      enableAdminAPI: true
      walCompression: true
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 10Gi
      # tolerations:
      # - key: "arm"
      #   operator: "Exists"
      podMetadata:
        annotations:
          backup.velero.io/backup-volumes: prometheus-kube-prometheus-stack-prometheus-db
      thanos:
        image: quay.io/thanos/thanos:v0.28.1
        version: v0.21.1
        objectStorageConfig:
          name: thanos-objstore-secret
          key: objstore.yml
      podAntiAffinity: "hard"

      additionalScrapeConfigs:
        - job_name: minio
          metrics_path: /minio/v2/metrics/cluster
          scheme: http
          static_configs:
            - targets: [ 'minio.default.svc:9000' ]
    thanosService:
      enabled: true

