kube-prometheus-stack:

  cleanPrometheusOperatorObjectNames: true

  defaultRules:
    disabled:
      HostHighCpuLoad: true
      NodeSystemSaturation: true

  customRules:
    KubePersistentVolumeFillingUp:
#      for: 1h
      severity: "warning"

  alertmanager:
    config:
      global:
        resolve_timeout: 5m

      route:
        # group_by: ['alertname', 'job']
        group_wait: 45s
        group_interval: 10m
        repeat_interval: 12h
        receiver: 'discord-notifications'
        routes:
          - receiver: "null" # quote
            matchers:
              - alertname =~ "Watchdog"
          - receiver: "null" # quote
            matchers:
              - alertname =~ "InfoInhibitor"
          - receiver: 'pagerduty'
            match:
              severity: critical
            continue: true
          - receiver: 'discord-notifications'
      inhibit_rules:
        - source_matchers:
            - severity = "critical"
          target_matchers:
            - severity = "warning"
          equal: ["alertname", "namespace"]

      templates:
      - '/etc/alertmanager/config/*.tmpl'

    templateFiles:
      pagerduty-custom.tmpl: |-
        {{- define "pagerduty.custom.description" -}}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}{{- end -}}

    ingress:
      enabled: true
      pathType: Prefix
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/issuer: step-issuer
        cert-manager.io/issuer-kind: StepClusterIssuer
        cert-manager.io/issuer-group: certmanager.step.sm
        cert-manager.io/revision-history-limit: "3"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
        nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: https://auth.rsr.net/oauth2/start
      hosts: [ prom-alert.rsr.net ]
      tls:
        - hosts:
            - prom-alert.rsr.net
          secretName: prom-alert-cert-tls

    alertmanagerSpec:
      replicas: 1
      podAntiAffinity: hard

      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 10Gi
      tolerations:
        - key: "arm64"
          operator: "Exists"

  grafana:
    enabled: false
    forceDeployDashboards: true
    sidecar:
      dashboards:
        annotations:
          grafana_folder: Kubernetes

  kubelet:
   enabled: true
   serviceMonitor:
     metricRelabelings:
       - action: replace
         sourceLabels: ["node"]
         targetLabel: instance

  kube-state-metrics:
    metricLabelsAllowlist: ["persistentvolumeclaims=[*]"]
    prometheus:
      monitor:
        enabled: true
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels: ["__meta_kubernetes_pod_node_name"]
            targetLabel: kubernetes_node

  kubeApiServer:
    enabled: true

  kubeControllerManager:
    enabled: false
#    endpoints:
#      - 10.2.0.30
    service:
      enabled: true
      port: 10257
      targetPort: 10257
    serviceMonitor:
      enabled: true
      https: true
      insecureSkipVerify: true

  kubeScheduler:
    enabled: false
#    endpoints:
#      - 10.2.0.30
    service:
      enabled: true
      port: 10259
      targetPort: 10259
    serviceMonitor:
      enabled: true
      https: true
      insecureSkipVerify: true

  kubeProxy:
    enabled: false
#    endpoints:
#      - 10.2.0.30

  kubeEtcd:
    enabled: false
#    endpoints:
#      - 10.2.0.30
    service:
      enabled: true
      port: 2381
      targetPort: 2381


  prometheusOperator:
    createCustomResource: true
    # prometheusConfigReloaderImage:
    #   repository: quay.io/coreos/prometheus-config-reloader
    #   tag: v0.39.0
    # configmapReloadImage:
    #   repository: jimmidyson/configmap-reload
    #   tag: v0.4.0
    prometheusConfigReloader:
      resources:
        limits:
          cpu: 200m
    admissionWebhooks:
      enabled: false

  prometheus:
    ingress:
      enabled: true
      pathType: Prefix
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/issuer: step-issuer
        cert-manager.io/issuer-kind: StepClusterIssuer
        cert-manager.io/issuer-group: certmanager.step.sm
        cert-manager.io/revision-history-limit: "3"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
        nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: https://auth.rsr.net/oauth2/start
      hosts: [ prom-server.rsr.net ]
      tls:
        - hosts:
            - prom-server.rsr.net
          secretName: prom-server-cert-tls

    thanosService:
      enabled: true
    thanosServiceMonitor:
      enabled: true

    prometheusSpec:
      replicas: 2
      replicaExternalLabelName: "replica"
      thanos:
        image: quay.io/thanos/thanos:v0.34.1
        version: v0.30.1
        objectStorageConfig:
          name: thanos-objstore-secret
          key: objstore.yml
      podAntiAffinity: hard
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      retention: 6h
      retentionSize: 6GB
      enableAdminAPI: true
      walCompression: true
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 10Gi

#      resources:
#        requests:
#          memory: 2000Mi
#          cpu: 250m
#        limits:
#          memory: 5000Mi
      # tolerations:
      # - key: "arm"
      #   operator: "Exists"

  nodeExporter:
    enabled: true

  prometheus-node-exporter:
    prometheus:
      monitor:
        enabled: true
    tolerations:
      - key: "arm64"
        operator: "Exists"
      - key: "arm1"
        operator: "Exists"
      - key: "armhf"
        operator: "Exists"
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
